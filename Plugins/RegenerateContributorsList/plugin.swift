import Foundation
import PackagePlugin

@main
struct RegenerateContributorsList : CommandPlugin {
    // Entry
    func performCommand(context: PluginContext, arguments: [String]) async throws {
        var argExtractor = ArgumentExtractor(arguments)
        let verbose = argExtractor.extractFlag(named: "verbose")
        
        let commiters = try getCommiters(at: context.package.directory)
        if verbose > 0 {
            print("Committers are:")
            print(commiters.sorted().joined(separator: "\n"))
        }
        
        let contributorsFileContents = """
# This file contains a list of people who have made code contributions.

\(commiters.sorted().joined(separator: "\n"))

# Do not edit this file by hand. Its contents are created by a package
# Plugin that uses Git history to contruct the list.
"""
        
        let contributorsFile = context.package.directory.appending("CONTRIBUTORS.txt")
        print("Writing \(commiters.count) contributors to \(contributorsFile)")
        let contributorsURL = URL(fileURLWithPath: contributorsFile.stem)
        try contributorsFileContents.write(to: contributorsURL, atomically: true, encoding: .utf8)
    }
    
    // Helper
    func getCommiters(at path: Path) throws -> Set<String> {
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/git")
        process.currentDirectoryURL = URL(fileURLWithPath: path.string)
        process.arguments = ["log", "--pretty=format:- %an <%ae>%n", "."]
        
        let outputPipe = Pipe()
        process.standardOutput = outputPipe
        try process.run()
        process.waitUntilExit()
        
        let outputData = outputPipe.fileHandleForReading.readDataToEndOfFile()
        let output = String(decoding: outputData, as: UTF8.self)
        
        let contributors = Set(output.components(separatedBy: CharacterSet.newlines).sorted().filter {
            !$0.isEmpty
        })
        
        return contributors
    }
}
